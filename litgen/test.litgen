<|----------------------------------------------------------------------------|>
<|head <|-- BEGIN head |>
<|----------------------------------------------------------------------------|>

<|title    |Literate Python|>
<|subtitle |A use for the Literate-Generic implementation of ATF|>
<|author   |Henry Blanchette|>
<|date     |January 7th, 2019|>
<|abstract |This is a test document for prototyping my idea for language-generically implementing literate programming style. Typically documentation formats require restrictive commands for the actually documentation code, and allow little freedom about its ultimate formatting. This is useful for standard formats for hackage, javadocs, etc., but not very good for beautiful, literate programs. ATF is a good solution because it allows more syntax freedom and simplicity as well easy exportation to many typesetting formats such as HTML and LaTex.|>

<|----------------------------------------------------------------------------|>
|> <|-- END head |>
<|----------------------------------------------------------------------------|>

<|----------------------------------------------------------------------------|>
<|body <|-- BEGIN body |>
<|----------------------------------------------------------------------------|>

<|#|Factorial|>

<|p|The factorial function can be implemented in a variety of ways. The mathematical definition of <|$ n! |> where <|$ n \in \mathbb{N} |> looks like |>

<|$$
    n! := \begin{cases}
        1              & \text{ if } n = 0 \\
        (n-1)! \cdot x & \text{ if } n > 0
    \end{cases}
|>

<|p|To implement this in a very straightfoward way is pretty easy. The following is Python code for factorial, calculated in the same way as defined above. It is only printed in documentation, and not in the actual source code, because I didn't want to take up the name <|`factorial|> just with this example. It is a naive implementation of the factorial function.|>

<|```doc
def factorial(n):
    assert (n >= 0)
    if (n == 0):
        return 1
    else:
        return n * factorial(n - 1)
|>

<|p|The next block of code will be printed in the documentation and source code. It is the same naive implementation of factorial from before, but I've named it <|`factorial_recursive|> to indicate that it is implemented recursively. I will explain in a moment why this is important.|>

<|```
def factorial_recursive(n):
    assert (n >= 0)
    if n == 0:
        return 1
    else:
        return n * factorial_recursive(n - 1)
|>

<|#|Folding|>

<|p|A recursive implementation is almost always suboptimal, <|_especially|> in Python, because there are strict limitations on recursive call depth. If you tried to execute <|`factorial_recursive(1000)|>, you would get a recursive depth overflow. Of course, there are only <|`n|> operations needed to execute <|`factorial_recursive(n)|>, so that should be reflected in the time complexity of an optimal factorial implementation. Lets take a look at this one:|>

<|```doc
def factorial_folding(n):
    assert (n >= 0)
    result = 1
    for i in range(1, n+1): result *= i
    return result
|>

<|p|There we go! Like we wanted, there are <|$ \mathcal{O}(n) |> operations to perform. This technique, as reflected in the name of this function, is called <|*folding|>. The folding is performed on the list of integers from <|`1|> to <|`n|>, which is fetched by <|`range(1, n+1)|>. We can abstract folding, from the <|`factorial_folding|> function, for an arbitrary function and list and write the following that has the signature <|$ fold\text{-}left : (B \rightarrow A) \rightarrow B \rightarrow [A] \rightarrow B |>.|>


<|```
#
# fold_left(f: B->A->B, x0: B, xs: [A]) : B
#
def fold_left(f, x0, xs):
    for x in xs: x0 = f(x0, x)
    return x0

def factorial_folding(n):
    return fold_left(int.__mul__, 1, range(1, n+1))
|>

<|p|This is the left-fold. The signature for a right-fold would be <|$ fold\text{-}right : (A \rightarrow B \rightarrow B) \rightarrow B \rightarrow [A] \rightarrow B|>, implemented by|>

<|```
#
# fold_right(f: A->B->B, x0: B, xs: [A]) : B
#
def fold_right(f, x0, xs):
    for x in xs: x0 = f(x, x0)
    return x0
|>

<|----------------------------------------------------------------------------|>
|>
<|----------------------------------------------------------------------------|>

<|----------------------------------------------------------------------------|>
<|foot <|-- BEGIN foot |>
<|----------------------------------------------------------------------------|>

<|bibliography

    <|bib-item
        Highlightjs.
        <|@|https://highlightjs.org/|link|>.
    |>
    <|bib-item|
        Wikipedia: Folding (Higher-Order Function).
        <|@|https://en.wikipedia.org/wiki/Fold_(higher-order_function)|link|>.
    |>

|>

<|----------------------------------------------------------------------------|>
|>
<|----------------------------------------------------------------------------|>
